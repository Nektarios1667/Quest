using Microsoft.Xna.Framework.Content;
using MonoGUI;
using Quest.Utilities;
using System.IO;
using System.Linq;

namespace Quest.Managers;
public class MenuManager
{
    public GUI MainMenu { get; private set; }
    public GUI SettingsMenu { get; private set; }
    public GUI CreditsMenu { get; private set; }
    public GUI LevelSelectMenu { get; private set; }
    public GUI PauseMenu { get; private set; }
    private readonly GameManager gameManager;
    private readonly PlayerManager playerManager;
    // Widgets
    private readonly ListBox worlds;
    private readonly ListBox saves;
    public MenuManager(Game window, SpriteBatch batch, ContentManager content, GameManager gameManager, PlayerManager playerManager)
    {
        this.gameManager = gameManager;
        this.playerManager = playerManager;

        // Main Menu
        MainMenu = new(window, batch, PixelOperator);
        MainMenu.LoadContent(content, "Images\\Gui");
        Button startButton = new(MainMenu, new(Constants.Middle.X - 150, 300), new(300, 75), Color.White, Color.Black * 0.6f, ColorTools.GrayBlack * 0.6f, () => StateManager.State = GameState.LevelSelect, [], text: "Start Game", font: PixelOperatorSubtitle, border: 0);
        Button settingsButton = new(MainMenu, new(Constants.Middle.X - 150, 400), new(300, 75), Color.White, Color.Black * 0.6f, ColorTools.GrayBlack * 0.6f, () => StateManager.State = GameState.Settings, [], text: "Settings", font: PixelOperatorSubtitle, border: 0);
        Button creditsButton = new(MainMenu, new(Constants.Middle.X - 150, 500), new(300, 75), Color.White, Color.Black * 0.6f, ColorTools.GrayBlack * 0.6f, () => StateManager.State = GameState.Credits, [], text: "Credits", font: PixelOperatorSubtitle, border: 0);
        Button exitButton = new(MainMenu, new(Constants.Middle.X - 150, 600), new(300, 75), Color.White, Color.Black * 0.6f, ColorTools.GrayBlack * 0.6f, () => window.Exit(), [], text: "Exit", font: PixelOperatorSubtitle, border: 0);
        MainMenu.Widgets = [startButton, settingsButton, creditsButton, exitButton];

        // Settings Menu
        SettingsMenu = new(window, batch, PixelOperator);
        SettingsMenu.LoadContent(content, "Images\\Gui");
        Button settingsBackButton = new(SettingsMenu, new(20, 20), new(100, 40), Color.White, Color.Gray * 0.5f, Color.DarkGray * 0.5f, StateManager.RevertGameState, [], text: "Back", font: PixelOperator, border: 0);

        HorizontalSlider musicSlider = new(SettingsMenu, new(200, 300), 300, Color.Gray, Color.White, thickness: 5, size: 12);
        musicSlider.Value = SoundManager.MusicVolume;
        musicSlider.ValueChanged += (value) => SoundManager.MusicVolume = value;
        Label musicLabel = new(SettingsMenu, new(200, 250), Color.White, "Music Volume", PixelOperator);
        Label musicValue = new(SettingsMenu, new(520, 285), Color.White, $"{(int)(musicSlider.Value * 100)}%", PixelOperator);
        musicSlider.ValueChanged += (value) => musicValue.Text = $"{(int)(value * 100)}%";

        HorizontalSlider soundSlider = new(SettingsMenu, new(200, 365), 300, Color.Gray, Color.White, thickness: 5, size: 12);
        soundSlider.Value = SoundManager.SoundVolume;
        soundSlider.ValueChanged += (value) => SoundManager.SoundVolume = value;
        Label soundLabel = new(SettingsMenu, new(200, 315), Color.White, "Sound Volume", PixelOperator);
        Label soundValue = new(SettingsMenu, new(520, 350), Color.White, $"{(int)(soundSlider.Value * 100)}%", PixelOperator);
        soundSlider.ValueChanged += (value) => soundValue.Text = $"{(int)(value * 100)}%";

        SettingsMenu.Widgets = [settingsBackButton, musicSlider, musicLabel, musicValue, soundSlider, soundLabel, soundValue];

        // Credits Menu
        CreditsMenu = new(window, batch, PixelOperator);
        CreditsMenu.LoadContent(content, "Images\\Gui");
        Button creditsBackButton = new(CreditsMenu, new(20, 20), new(100, 40), Color.White, Color.Gray * 0.5f, Color.DarkGray * 0.5f, StateManager.RevertGameState, [], text: "Back", font: PixelOperator, border: 0);
        Label creditsLabel = new(CreditsMenu, new(200, 300), Color.White, "- Game written in C# with MonoGame framework\n- Created by Nektarios\n- Game assets made by Nektarios using Gimp\n- Main menu artwork generated by ChatGPT\n- Sounds and music from Pixabay\n", PixelOperatorLarge);
        CreditsMenu.Widgets = [creditsBackButton, creditsLabel];

        // Level select
        LevelSelectMenu = new(window, batch, PixelOperator);
        LevelSelectMenu.LoadContent(content, "Images\\Gui");
        
        worlds = new(LevelSelectMenu, new(250, 100), new(500, 700), Color.White, Color.Black * .6f, Color.LightBlue * .3f, border: 2, borderColor: Color.Cyan * .2f, seperation: 0);
        saves = new(LevelSelectMenu, new(800, 100), new(300, 700), Color.White, Color.Black * .6f, Color.LightBlue * .3f, border: 2, borderColor: Color.Cyan * .2f, seperation: 0);
        worlds.ItemSelected += (item) => { LoadSaves(item); };

        Label worldListLabel = new(LevelSelectMenu, new(445, 40), Color.White, "Worlds", PixelOperatorLarge);
        Label saveListLabel = new(LevelSelectMenu, new(900, 40), Color.White, "Saves", PixelOperatorLarge);
        Button levelSelectBackButton = new(LevelSelectMenu, new(20, 20), new(100, 40), Color.White, Color.Black * 0.5f, ColorTools.NearBlack * 0.5f, StateManager.RevertGameState, [], text: "Back", font: PixelOperator, border: 0);
        Button openButton = new(LevelSelectMenu, new(400, 820), new(180, 50), Color.White, Color.Black * 0.6f, ColorTools.NearBlack * 0.6f, OpenSave, [], text: "Open", border: 0);
        Button refreshButton = new(LevelSelectMenu, new(600, 820), new(180, 50), Color.White, Color.Black * 0.6f, ColorTools.NearBlack * 0.6f, () => LoadSaves(worlds.Selected), [], text: "Refresh", border: 0);
        Button deleteButton = new(LevelSelectMenu, new(800, 820), new(180, 50), Color.White, Color.DarkRed * 0.6f, Color.Red * 0.6f, DeleteSelectedSave, [], text: "Delete", border: 0);

        LevelSelectMenu.Widgets = [levelSelectBackButton, worlds, saves, openButton, deleteButton, refreshButton, worldListLabel, saveListLabel];

        // Pause Menu
        PauseMenu = new(window, batch, PixelOperator);
        PauseMenu.LoadContent(content, "Images\\Gui");
        Label pauseLabel = new(PauseMenu, new(Constants.Middle.X - 110, 150), Color.White, "PAUSED", PixelOperatorTitle);
        Button resumeButton = new(PauseMenu, new(Constants.Middle.X - 150, 300), new(300, 75), Color.White, Color.Transparent, ColorTools.GrayBlack * 0.5f, () => StateManager.OverlayState = OverlayState.None, [], text: "Resume", font: PixelOperatorSubtitle, border: 0);
        Button quicksaveButton = new(PauseMenu, new(Constants.Middle.X - 150, 380), new(300, 75), Color.White, Color.Transparent, ColorTools.GrayBlack * 0.5f, () => { StateManager.OverlayState = OverlayState.None; StateManager.SaveGameState(gameManager, playerManager, StringTools.ParseLevelPath(StateManager.CurrentSave).level); }, [], text: "Quick Save", font: PixelOperatorSubtitle, border: 0);
        Button pauseSettingsButton = new(PauseMenu, new(Constants.Middle.X - 150, 460), new(300, 75), Color.White, Color.Transparent, ColorTools.GrayBlack * 0.5f, () => { StateManager.OverlayState = OverlayState.None; StateManager.State = GameState.Settings; }, [], text: "Settings", font: PixelOperatorSubtitle, border: 0);
        Button mainMenuButton = new(PauseMenu, new(Constants.Middle.X - 150, 540), new(300, 75), Color.White, Color.Transparent, ColorTools.GrayBlack * 0.5f, () => { StateManager.OverlayState = OverlayState.None; StateManager.State = GameState.MainMenu;  }, [], text: "Main Menu", font: PixelOperatorSubtitle, border: 0);
        Button quitButton = new(PauseMenu, new(Constants.Middle.X - 150, 620), new(300, 75), Color.White, Color.Transparent, ColorTools.GrayBlack * 0.5f, () => window.Exit(), [], text: "Quit", font: PixelOperatorSubtitle);
        
        PauseMenu.Widgets = [resumeButton, quicksaveButton, pauseSettingsButton, mainMenuButton, quitButton, pauseLabel];
    }

    public void RefreshWorldList()
    {
        worlds.Items.Clear();
        worlds.AddItems([.. gameManager.LevelManager.Levels.Select(l => l.Name)]);
    }
    public void DeleteSelectedSave()
    {
        if (saves.Selected != null && saves.Selected != "(New Save)")
        {
            string world = StringTools.ParseLevelPath(worlds.Selected).world;
            File.Delete($"../../../GameData/Worlds/{world}/saves/{saves.Selected}.qsv");
            File.Delete($"GameData/Worlds/{world}/saves/{saves.Selected}.qsv");
            LoadSaves(worlds.Selected);
        }
    }
    public void LoadSaves(string level)
    {
        saves.Items.Clear();
        string[] dir = level.Split('\\', '/');
        var savesList = Directory.GetFiles($"GameData/Worlds/{dir[0]}/saves", "*.qsv").Select(f => System.IO.Path.GetFileNameWithoutExtension(f)).ToArray();
        saves.AddItems(savesList);
        saves.AddItems("(New Save)");
    }
    public void OpenSave()
    {
        string world = StringTools.ParseLevelPath(worlds.Selected).world;

        gameManager.LevelManager.ReadLevel(gameManager.UIManager, worlds.Selected, reload: true);
        gameManager.LevelManager.LoadLevel(gameManager, worlds.Selected);

        if (saves.Selected != "(New Save)")
            StateManager.ReadGameState(gameManager, playerManager, $"{world}\\{saves.Selected}");
        else
            StateManager.CurrentSave = $"{world}\\{DateTime.Now:Save MM-dd-yy HH-mm-ss}";

        StateManager.State = GameState.Game;
    }
    public void Update(GameManager gameManager)
    {
        DebugManager.StartBenchmark("MenuUpdate");
        switch (StateManager.State)
        {
            case GameState.MainMenu:
                MainMenu.Update(gameManager.DeltaTime, InputManager.MouseState, InputManager.KeyboardState);
                break;
            case GameState.Settings:
                SettingsMenu.Update(gameManager.DeltaTime, InputManager.MouseState, InputManager.KeyboardState);
                break;
            case GameState.Credits:
                CreditsMenu.Update(gameManager.DeltaTime, InputManager.MouseState, InputManager.KeyboardState);
                break;
            case GameState.LevelSelect:
                LevelSelectMenu.Update(gameManager.DeltaTime, InputManager.MouseState, InputManager.KeyboardState);
                break;
        }
        
        switch (StateManager.OverlayState)
        {
            case OverlayState.Pause:
                PauseMenu.Update(gameManager.DeltaTime, InputManager.MouseState, InputManager.KeyboardState);
                break;
        }

        DebugManager.EndBenchmark("MenuUpdate");
    }
    public void Draw()
    {
        DebugManager.StartBenchmark("MenuDraw");
        switch (StateManager.State)
        {
            case GameState.MainMenu:
                DrawMenu();
                break;
            case GameState.Settings:
                DrawSettings();
                break;
            case GameState.Credits:
                DrawCredits();
                break;
            case GameState.LevelSelect:
                DrawLevelSelection();
                break;
        }

        switch (StateManager.OverlayState)
        {
            case OverlayState.Pause:
                DrawPauseMenu();
                break;
        }
        DebugManager.EndBenchmark("MenuDraw");
    }
    private void DrawMenu()
    {
        gameManager.Batch.Draw(Textures[TextureID.MenuBackground], new(0, 0), null, Color.White, 0f, Vector2.Zero, Constants.Window.ToVector2() / TextureManager.Metadata[TextureID.MenuBackground].Size.ToVector2(), SpriteEffects.None, 0.0f);
        MainMenu.Draw();
    }
    private void DrawSettings()
    {
        gameManager.Batch.Draw(Textures[TextureID.MenuBackground], new(0, 0), null, Color.White, 0f, Vector2.Zero, Constants.Window.ToVector2() / TextureManager.Metadata[TextureID.MenuBackground].Size.ToVector2(), SpriteEffects.None, 0.0f);
        gameManager.Batch.FillRectangle(new(Vector2.Zero, Constants.Window), Color.Black * 0.6f);
        SettingsMenu.Draw();
    }
    private void DrawCredits()
    {
        gameManager.Batch.Draw(Textures[TextureID.MenuBackground], new(0, 0), null, Color.White, 0f, Vector2.Zero, Constants.Window.ToVector2() / TextureManager.Metadata[TextureID.MenuBackground].Size.ToVector2(), SpriteEffects.None, 0.0f);
        gameManager.Batch.FillRectangle(new(Vector2.Zero, Constants.Window), Color.Black * 0.6f);
        CreditsMenu.Draw();
    }
    private void DrawLevelSelection()
    {
        gameManager.Batch.Draw(Textures[TextureID.MenuBackground], new(0, 0), null, Color.White, 0f, Vector2.Zero, Constants.Window.ToVector2() / TextureManager.Metadata[TextureID.MenuBackground].Size.ToVector2(), SpriteEffects.None, 0.0f);
        gameManager.Batch.FillRectangle(new(Vector2.Zero, Constants.Window), Color.White * 0.2f);
        LevelSelectMenu.Draw();
    }
    private void DrawPauseMenu()
    {

        gameManager.Batch.FillRectangle(new(Vector2.Zero, Constants.Window), Color.Black * 0.6f);
        PauseMenu.Draw();
    }
}
